"use strict";(self.webpackChunkbluedot_docs=self.webpackChunkbluedot_docs||[]).push([[7715],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>v});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),g=r,v=d["".concat(s,".").concat(g)]||d[g]||u[g]||o;return t?i.createElement(v,a(a({ref:n},p),{},{components:t})):i.createElement(v,a({ref:n},p))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},89600:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(87462),r=(t(67294),t(3905));const o={},a="Android Integration",l={unversionedId:"integrations/CleverTap/Android",id:"integrations/CleverTap/Android",title:"Android Integration",description:"Getting Started",source:"@site/docs/integrations/CleverTap/Android.md",sourceDirName:"integrations/CleverTap",slug:"/integrations/CleverTap/Android",permalink:"/integrations/CleverTap/Android",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Overview",permalink:"/integrations/CleverTap/Overview"},next:{title:"iOS Integration",permalink:"/integrations/CleverTap/iOS"}},s={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Integrate Bluedot Point SDK in your Project",id:"integrate-bluedot-point-sdk-in-your-project",level:2},{value:"Interaction between CleverTap SDK and Bluedot Point SDK",id:"interaction-between-clevertap-sdk-and-bluedot-point-sdk",level:2}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"android-integration"},"Android Integration"),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"Modify your\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"build.gradle"),"\xa0to include CleverTap SDK."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle"},"dependencies {\n    ...\n    implementation 'com.google.android.gms:play-services-base:17.6.0'\n    implementation 'androidx.core:core:1.3.0'\n    implementation 'com.android.installreferrer:installreferrer:2.1'\n\n    implementation 'com.clevertap.android:clevertap-android-sdk:4.1.1'\n    implementation 'com.google.firebase:firebase-messaging:20.2.4'\n\n    //Bluedot Point SDK\n    implementation 'com.gitlab.bluedotio.android:point_sdk_android:15.3.4'\n}\n\napply plugin: 'com.google.gms.google-services'\n")),(0,r.kt)("h2",{id:"integrate-bluedot-point-sdk-in-your-project"},"Integrate Bluedot Point SDK in your Project"),(0,r.kt)("p",null,"To integrate Bluedot Point SDK in your project, please click ",(0,r.kt)("a",{parentName:"p",href:"/Point%20SDK/Android/Overview"},"here")),(0,r.kt)("h2",{id:"interaction-between-clevertap-sdk-and-bluedot-point-sdk"},"Interaction between CleverTap SDK and Bluedot Point SDK"),(0,r.kt)("p",null,"1","."," We need to ask the user to give permission to use the location services. To do that, create a ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestPermissionActivity.kt")," and then add the below code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"public class RequestPermissionActivity extends AppCompatActivity {\n\n    final int PERMISSION_REQUEST_CODE = 1;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        //Request permission required for location\n        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION}, PERMISSION_REQUEST_CODE);\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        switch (requestCode) {\n            case PERMISSION_REQUEST_CODE:\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    ((MainApplication)getApplication()).initPointSDK();\n                } else {\n                    //Permissions denied\n                }\n                break;\n        }\n        finish();\n    }\n}\n")),(0,r.kt)("p",null,"2","."," We then create another class which will implements Bluedot ",(0,r.kt)("inlineCode",{parentName:"p"},"InitializationResultListener")," and upon SDK initialisation. To do that create ",(0,r.kt)("inlineCode",{parentName:"p"},"MainApplication.kt")," class and add the below code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'public class MainApplication extends Application implements InitializationResultListener {\n\n    private ServiceManager serviceManager;\n    private final String projectId = ""; //Project Id for the Point Demo App\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        //Start the CleverTap SDK.\n        initCleverTap();\n\n        //Start the Bluedot Point SDK\n        initPointSDK();\n    }\n\n    public void initPointSDK() {\n\n        int checkPermissionCoarse = ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION);\n        int checkPermissionFine = ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION);\n\n        if(checkPermissionCoarse == PackageManager.PERMISSION_GRANTED && checkPermissionFine == PackageManager.PERMISSION_GRANTED) {\n            serviceManager = ServiceManager.getInstance(this);\n\n            if(!serviceManager.isBlueDotPointServiceRunning()) {\n                serviceManager.initialize(projectId, this);\n            }\n        }\n        else\n        {\n            requestPermissions();\n        }\n    }\n\n    private void initCleverTap() {\n        ActivityLifecycleCallback.register(this);\n    }\n\n    private void requestPermissions() {\n\n        Intent intent = new Intent(getApplicationContext(), RequestPermissionActivity.class);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        startActivity(intent);\n    }\n\n    @Override\n    public void onInitializationFinished(@Nullable BDError bdError) {\n        if (bdError != null){\n            Toast.makeText(getApplicationContext(),\n                    "Bluedot Initialization Error " + bdError.getReason(),\n                    Toast.LENGTH_LONG).show();\n\n            return;\n        }\n    }\n}\n')),(0,r.kt)("p",null,"3","."," Next, we create a class which will receive Bluedot GeoTrigger events, which we will then log the event via the CleverTap API. To do that create ",(0,r.kt)("inlineCode",{parentName:"p"},"BluedotGeoTriggerReceiver.kt")," class and add the below code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'public class BluedotGeoTriggerReceiver extends GeoTriggeringEventReceiver {\n    private final String TAG = "BluedotApp";\n\n    @Override\n    public void onZoneInfoUpdate(@NotNull List<ZoneInfo> list, @NotNull Context context) {\n        Log.i(TAG, "Zones updated at: " + new Date().toString()\n                + " ZoneInfos count: " + list.size());\n    }\n\n    @Override\n    public void onZoneEntryEvent(@NotNull ZoneEntryEvent zoneEntryEvent, @NotNull Context context) {\n        sendCustomEvent(\n                "YOUR CUSTOM ENTRY EVENT NAME",\n                zoneEntryEvent.getZoneInfo(),\n                -1,\n                zoneEntryEvent.getZoneInfo().getCustomData(),\n                context);\n    }\n\n    @Override\n    public void onZoneExitEvent(@NotNull ZoneExitEvent zoneExitEvent, @NotNull Context context) {\n        sendCustomEvent(\n                "YOUR CUSTOM EXIT EVENT NAME",\n                zoneExitEvent.getZoneInfo(),\n                zoneExitEvent.getDwellTime(),\n                zoneExitEvent.getZoneInfo().getCustomData(),\n                context);\n    }\n\n    private void sendCustomEvent(String eventName, ZoneInfo zoneInfo, int dwellTime, Map<String, String> customDataMap, Context context) {\n        CleverTapAPI cleverTap = CleverTapAPI.getDefaultInstance(context);\n        HashMap<String, Object> checkInAction = new HashMap<String, Object>();\n        checkInAction.put("bluedot_zone_id", zoneInfo.getZoneId());\n        checkInAction.put("bluedot_zone_name", zoneInfo.getZoneName());\n        if(customDataMap != null && !customDataMap.isEmpty()) {\n            for(Map.Entry<String, String> data : customDataMap.entrySet()) {\n                checkInAction.put(data.getKey(), data.getValue());\n            }\n        }\n\n        if(dwellTime != -1) {\n            checkInAction.put("dwell_time", dwellTime);\n        }\n\n        cleverTap.pushEvent(eventName, checkInAction);\n    }\n}\n')))}u.isMDXComponent=!0}}]);