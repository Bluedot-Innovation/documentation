"use strict";(self.webpackChunkbluedot_docs=self.webpackChunkbluedot_docs||[]).push([[9909],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},53184:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const i={pagination_next:"Chat AI/Reference",pagination_prev:"Chat AI/iOS Guide"},o="Android Guide",s={unversionedId:"Chat AI/Android Guide",id:"Chat AI/Android Guide",title:"Android Guide",description:"This page covers how to integrate Rezolve Commerce Brain in your Android app using the Point SDK. You\u2019ll learn about the key classes, how to create and manage chat AI sessions, and how to handle real-time responses.",source:"@site/docs/Chat AI/Android Guide.md",sourceDirName:"Chat AI",slug:"/Chat AI/Android Guide",permalink:"/Chat AI/Android Guide",draft:!1,tags:[],version:"current",frontMatter:{pagination_next:"Chat AI/Reference",pagination_prev:"Chat AI/iOS Guide"},sidebar:"defaultSidebar",previous:{title:"iOS Guide",permalink:"/Chat AI/iOS Guide"},next:{title:"Reference",permalink:"/Chat AI/Reference"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Creating a Chat Session",id:"creating-a-chat-session",level:3},{value:"Sending Messages &amp; Receiving Streaming Responses",id:"sending-messages--receiving-streaming-responses",level:3},{value:"Kotlin",id:"kotlin",level:4},{value:"Java",id:"java",level:4},{value:"Best Practices",id:"best-practices",level:3}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"android-guide"},"Android Guide"),(0,r.kt)("p",null,"This page covers how to integrate ",(0,r.kt)("strong",{parentName:"p"},"Rezolve Commerce Brain")," in your Android app using the ",(0,r.kt)("strong",{parentName:"p"},"Point SDK"),". You\u2019ll learn about the key classes, how to create and manage chat AI sessions, and how to handle real-time responses."),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Android API level 26+")),(0,r.kt)("li",{parentName:"ul"},"The Rezolve AI integration is already configured in your project")),(0,r.kt)("h3",{id:"creating-a-chat-session"},"Creating a Chat Session"),(0,r.kt)("p",null,"After you\u2019ve set up the Point SDK, you can create new chat sessions at any point by accessing ",(0,r.kt)("inlineCode",{parentName:"p"},"BrainAI")," through ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceManager"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val brainAI = ServiceManager.getInstance(context).brainAI\nval chat = brainAI?.createNewChat()\n\n")),(0,r.kt)("p",null,"Every chat session has a unique ",(0,r.kt)("inlineCode",{parentName:"p"},"sessionID")," in URN format (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"urn:uuid:9a652678-4616-475d-af12-aca21cfbe06d"),")."),(0,r.kt)("p",null,"If you need to retrieve an existing session:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val existingChat = brainAI?.getChatWithSessionID("urn:uuid:9a652678-4616-475d-af12-aca21cfbe06d")\n')),(0,r.kt)("p",null,"And when you\u2019re done:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'brainAI?.closeChatWithSessionID("urn:uuid:9a652678-4616-475d-af12-aca21cfbe06d")\n')),(0,r.kt)("h3",{id:"sending-messages--receiving-streaming-responses"},"Sending Messages & Receiving Streaming Responses"),(0,r.kt)("p",null,"With a ",(0,r.kt)("inlineCode",{parentName:"p"},"Chat")," object, you can send messages to ",(0,r.kt)("strong",{parentName:"p"},"Rezolve Commerce Brain")," and receive chunks of responses as they\u2019re generated. The response stream is represented by ",(0,r.kt)("inlineCode",{parentName:"p"},"StreamingResponseDto")," objects."),(0,r.kt)("h4",{id:"kotlin"},"Kotlin"),(0,r.kt)("p",null,"A coroutine-based approach is recommended for asynchronous operations, preventing blocking the main thread."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Use an appropriate coroutine scope (e.g., viewModelScope or a custom scope)\nlaunch(Dispatchers.IO) {\n    try {\n        val responseStream = chat?.sendMessage("Tell me about the latest deals")\n        responseStream?.forEach { chunk ->\n            // Each chunk in the partial response\n            println("Chunk received: ${chunk.response}")\n        }\n    } catch (e: Exception) {\n        // Handle network or streaming errors\n        println("Error: ${e.localizedMessage}")\n    }\n}\n\n')),(0,r.kt)("h4",{id:"java"},"Java"),(0,r.kt)("p",null,"If you\u2019re using Java, you can handle the response stream using either Java 8+ streams or a callback-based approach:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'try {\n    // Potentially run on a background thread\n    Stream<StreamingResponseDto> streamOfResponses =\n        (Stream<StreamingResponseDto>) chat.sendMessage("Tell me about the latest deals", new CustomContinuation<Stream<StreamingResponseDto>>());\n\n    streamOfResponses.forEach(responseChunk -> {\n        System.out.println("Chunk received: " + responseChunk.getResponse());\n    });\n\n} catch (Exception e) {\n    // Handle errors\n    e.printStackTrace();\n}\n\n')),(0,r.kt)("p",null,"If you prefer callbacks, you can define a custom interface that\u2019s invoked each time a new chunk of data arrives, similar to the closure approach on iOS."),(0,r.kt)("h3",{id:"best-practices"},"Best Practices"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Session Persistence"),": Keep the same ",(0,r.kt)("inlineCode",{parentName:"li"},"Chat")," session for a single conversation flow to maintain context."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Error Handling"),": Network or streaming errors can occur."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"User Experience"),": Consider updating your UI as chunks arrive for a more dynamic and responsive experience.")))}d.isMDXComponent=!0}}]);