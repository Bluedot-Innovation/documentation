"use strict";(self.webpackChunkdocs_test=self.webpackChunkdocs_test||[]).push([[8],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(t),u=o,m=g["".concat(l,".").concat(u)]||g[u]||d[u]||r;return t?i.createElement(m,a(a({ref:n},c),{},{components:t})):i.createElement(m,a({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[g]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<r;p++)a[p]=t[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5838:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=t(7462),o=(t(7294),t(3905));const r={},a="Oracle Android Integration",s={unversionedId:"integrations/Oracle Responsys/Android",id:"integrations/Oracle Responsys/Android",title:"Oracle Android Integration",description:"Responsys & Bluedot SDK Integration",source:"@site/docs/integrations/Oracle Responsys/Android.md",sourceDirName:"integrations/Oracle Responsys",slug:"/integrations/Oracle Responsys/Android",permalink:"/documentation/integrations/Oracle Responsys/Android",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Oracle Responsys Integration",permalink:"/documentation/integrations/Oracle Responsys/Overview"},next:{title:"Oracle iOS Integration",permalink:"/documentation/integrations/Oracle Responsys/iOS"}},l={},p=[{value:"<strong>GitHub Sample Project</strong>",id:"github-sample-project",level:2}],c={toc:p},g="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(g,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"oracle-android-integration"},"Oracle Android Integration"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Responsys & Bluedot SDK Integration")),(0,o.kt)("p",null,"Add the following repositories and dependencies to your application\u2019s\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"build.gradle"),"\xa0file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gradle"},"dependencies {\n\xa0 implementation fileTree(dir: 'libs', include: \\['PushIOManager.aar'\\]) // Responsys PushIOManager\n\xa0 implementation 'com.gitlab.bluedotio.android:point\\_sdk\\_android:15.3.4' //Bluedot Point SDK\n\xa0 implementation 'com.google.firebase:firebase-core:16.0.8'\n\xa0 implementation 'com.google.firebase:firebase-messaging:17.6.0'\n\xa0 ...\n}\n\napply plugin: 'com.google.gms.google-services'\n")),(0,o.kt)("p",null,"The following code example demonstrates registering your app with Responsys SDK & also listen to Blue Dot Point SDK\u2019s ",(0,o.kt)("inlineCode",{parentName:"p"},"InitializationResultListener"),":"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Starting the Bluedot SDK")),(0,o.kt)("p",null,"1","."," We need to ask the user to give permission to use the location services. To do that, create a ",(0,o.kt)("inlineCode",{parentName:"p"},"RequestPermissionActivity.kt")," and then add the below code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public class RequestPermissionActivity extends AppCompatActivity {\n\n    final int PERMISSION_REQUEST_CODE = 1;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        //Request permission required for location\n        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION}, PERMISSION_REQUEST_CODE);\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        switch (requestCode) {\n            case PERMISSION_REQUEST_CODE:\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    ((MainApplication)getApplication()).initPointSDK();\n                } else {\n                    // Permissions denied\n                }\n                break;\n        }\n        finish();\n    }\n}\n")),(0,o.kt)("p",null,"2","."," The\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"ServiceManager"),"\xa0is the\xa0entry-point for an app to start using the Bluedot Point SDK. The app must\xa0get an instance of the ServiceManager class and invoke\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"initialize"),"\xa0method\xa0by providing the Project Id in order to initialize and start the Bluedot engine. The\xa0Project Id can be retrieved from the Bluedot Point Access account. It is important to pass a\xa0reference to\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"InitializationResultListener"),"\xa0so the app can receive initialization callbacks from the SDK."),(0,o.kt)("p",null,"Initializing the Bluedot SDK and requesting for Location permission from the user and setting a foreground notification."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class MainApplication extends Application implements InitializationResultListener {\n\n    ServiceManager mServiceManager;\n\n    private final String projectId = ""; //Project ID// for the App\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        //Registering App with Responsys SDK\n        PushIOManager.getInstance(getApplicationContext()).registerApp();\n        //Set this you need InApp Push feature from Responsys\n        PushIOManager.getInstance(this).setInAppFetchEnabled(true);\n\n        // initialize Bluedot point sdk\n        initPointSDK();\n    }\n\n    public void initPointSDK() {\n\n        int checkPermissionCoarse = ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION);\n        int checkPermissionFine = ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION);\n\n        if(checkPermissionCoarse == PackageManager.PERMISSION_GRANTED && checkPermissionFine == PackageManager.PERMISSION_GRANTED) {\n            mServiceManager = ServiceManager.getInstance(this);\n\n            if(!mServiceManager.isBlueDotPointServiceRunning()) {\n                mServiceManager.initialize(projectId, this);\n            }\n        }\n        else\n        {\n            requestPermissions();\n        }\n    }\n\n    private void requestPermissions() {\n\n        Intent intent = new Intent(getApplicationContext(), RequestPermissionActivity.class);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        startActivity(intent);\n    }\n')),(0,o.kt)("p",null,"The following mandatory callbacks of the ",(0,o.kt)("inlineCode",{parentName:"p"},"InitializationResultListener"),"\xa0interface must be implemented.\xa0"),(0,o.kt)("p",null,"User should ",(0,o.kt)("inlineCode",{parentName:"p"},"registerUserID")," on ",(0,o.kt)("inlineCode",{parentName:"p"},"PushIOManager")," with any customer user-specific ID, by default we are using Bluedot Point SDK InstallRef (It is a unique identifier assigned to a device during installation) in ",(0,o.kt)("inlineCode",{parentName:"p"},"onInitializationFinished()")," callback."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Override public void onInitializationFinished(@Nullable BDError bdError) {\n    if (bdError != null){\n        Toast.makeText(getApplicationContext(),\n                "Bluedot Initialization Error " + bdError.getReason(),\n                Toast.LENGTH_LONG).show();\n\n        return;\n    }\n\n    PushIOManager.getInstance(getApplicationContext()).registerUserId(mServiceManager.getInstallRef());\n}\n')),(0,o.kt)("p",null,"3","."," Next, we create a class,\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"BluedotGeoTriggerReceiver.kt"),", which will receive Bluedot GeoTrigger events. Inside the callbacks ",(0,o.kt)("inlineCode",{parentName:"p"},"ZoneInfo")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"FenceInfo")," details are populated in PIOGeoRegion and corresponding PushIOManager ",(0,o.kt)("inlineCode",{parentName:"p"},"onGeoRegionEntered()")," /\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"onGeoRegionExited()")," are called."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class BluedotGeoTriggerReceiver extends GeoTriggeringEventReceiver {\n    private final String TAG = "BluedotApp";\n\n    @Override\n    public void onZoneInfoUpdate(@NotNull List<ZoneInfo> list, @NotNull Context context) {\n        Log.i(TAG, "Zones updated at: " + new Date().toString()\n                + " ZoneInfos count: " + list.size());\n    }\n\n    @Override\n    public void onZoneEntryEvent(@NotNull ZoneEntryEvent zoneEntryEvent, @NotNull Context context) {\n        Log.i(TAG, "Zones entered at: " + new Date().toString()\n                + " Zone name:" + zoneEntryEvent.toString());\n\n        //Building GeoRegion  with Fence details\n        PIOGeoRegion geoRegion= new PIOGeoRegion();\n        geoRegion.setGeofenceId(zoneEntryEvent.getFenceInfo().getId());\n        geoRegion.setGeofenceName(zoneEntryEvent.getFenceInfo().getName());\n        geoRegion.setZoneId(zoneEntryEvent.getZoneInfo().getZoneId());\n        geoRegion.setZoneName(zoneEntryEvent.getZoneInfo().getZoneName());\n        geoRegion.setSource("Bluedot SDK");\n\n        //Reporting Checkin to Responsys\n        PushIOManager.getInstance(context).onGeoRegionEntered(geoRegion,\n                (s, pioRegionEventType, e) -> {\n                    Log.i(TAG,"onGeoRegionEntered  pioRegionEventType"+pioRegionEventType);\n                    if(e != null) {\n                        Log.i(TAG, "onGeoRegionEntered PIORegionException" + e.getErrorMessage() + "###" + e.getErrorDescription());\n                    }\n                });\n    }\n\n    @Override\n    public void onZoneExitEvent(@NotNull ZoneExitEvent zoneExitEvent, @NotNull Context context) {\n        Log.i(TAG, "Zones exited at: " + new Date().toString()\n                + " Zone name:" + zoneExitEvent.toString());\n\n        //Building GeoRegion with Fence details\n        PIOGeoRegion geoRegion = new PIOGeoRegion();\n        geoRegion.setGeofenceId(zoneExitEvent.getFenceInfo().getId());\n        geoRegion.setGeofenceName(zoneExitEvent.getFenceInfo().getName());\n        geoRegion.setDwellTime(zoneExitEvent.getDwellTime());\n        geoRegion.setZoneId(zoneExitEvent.getZoneInfo().getZoneId());\n        geoRegion.setZoneName(zoneExitEvent.getZoneInfo().getZoneName());\n        geoRegion.setSource("Bluedot SDK");\n\n        //Reporting Checkout to Responsys\n        PushIOManager.getInstance(context).onGeoRegionExited(geoRegion,\n                (s, pioRegionEventType, e) -> Log.i(TAG,"onGeoRegionExited "+s));\n    }\n}\n')),(0,o.kt)("p",null,"4","."," Finally, start Geo-triggering as per the ",(0,o.kt)("a",{parentName:"p",href:"/documentation/Point%20SDK/Android/Geo-triggering"},"Bluedot Geo-triggering Android documentation"),"."),(0,o.kt)("p",null,"For further information on the classes and methods discussed within this documentation, please refer to the\xa0",(0,o.kt)("a",{parentName:"p",href:"/documentation/Point%20SDK/Android/Overview"},"Android SDK documentation"),"."),(0,o.kt)("h2",{id:"github-sample-project"},(0,o.kt)("strong",{parentName:"h2"},"GitHub Sample Project")),(0,o.kt)("p",null,"A sample project which demonstrates the integration of the Responsys SDK and Bluedot Point SDK is available on\xa0",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/Bluedot-Innovation/OracleMinimalApp-Android"},"GitHub")),"."))}d.isMDXComponent=!0}}]);