"use strict";(self.webpackChunkdocs_test=self.webpackChunkdocs_test||[]).push([[1903],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,g=d["".concat(l,".").concat(h)]||d[h]||p[h]||o;return n?i.createElement(g,r(r({ref:t},u),{},{components:n})):i.createElement(g,r({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1009:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));const o={},r="Real-time Data Sync",s={unversionedId:"Point SDK/iOS/Features/Real-time data sync",id:"Point SDK/iOS/Features/Real-time data sync",title:"Real-time Data Sync",description:"Introduction",source:"@site/docs/Point SDK/iOS/Features/Real-time data sync.md",sourceDirName:"Point SDK/iOS/Features",slug:"/Point SDK/iOS/Features/Real-time data sync",permalink:"/Point SDK/iOS/Features/Real-time data sync",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Enable or Disable Zone",permalink:"/Point SDK/iOS/Features/Enable or disable zones"},next:{title:"Enhanced SDK restart",permalink:"/Point SDK/iOS/Features/Enhanced SDK restart"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Integrate Firebase SDK into your project",id:"integrate-firebase-sdk-into-your-project",level:2},{value:"Disable Firebase method swizzling",id:"disable-firebase-method-swizzling",level:3},{value:"Handle disabled method swizzling",id:"handle-disabled-method-swizzling",level:3},{value:"Set your Firebase Server key in Canvas",id:"set-your-firebase-server-key-in-canvas",level:2},{value:"Connect Bluedot with Firebase",id:"connect-bluedot-with-firebase",level:2},{value:"Subscribe the topic using Bluedot Project ID",id:"subscribe-the-topic-using-bluedot-project-id",level:3},{value:"Bluedot Push Interface",id:"bluedot-push-interface",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"real-time-data-sync"},"Real-time Data Sync"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"If your use case requires configuration changes (Eg: changes to your Zone or geofence setup) to be synced to your app in real-time, rather than waiting for the next successful SDK authentication or rule download, you can make use of the Real-time Data Sync feature. Real-time Data Sync uses Firebase Cloud Messaging to send a push notification to your application whenever changes to the project rule set are made, informing the application to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"notifyPushUpdateWithData")," method on the Bluedot iOS SDK to trigger a new rule set download."),(0,a.kt)("p",null,"This documentation will guide you through activating Bluedot\u2019s Real-time Data Sync along with Google Firebase Cloud Messaging."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Integrate the Point SDK & add Google Firebase to your Android Project"),(0,a.kt)("li",{parentName:"ol"},"Set your Firebase Server key in the Canvas dashboard"),(0,a.kt)("li",{parentName:"ol"},"Connect Bluedot SDK with Firebase")),(0,a.kt)("h2",{id:"integrate-firebase-sdk-into-your-project"},"Integrate Firebase SDK into your project"),(0,a.kt)("p",null,"To add Firebase to your app, you will need to create a Firebase project and a Firebase configuration file. This can be achieved with the steps documented ",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/ios/setup"},"here"),"."),(0,a.kt)("h3",{id:"disable-firebase-method-swizzling"},"Disable Firebase method swizzling"),(0,a.kt)("p",null,"Disable Firebase method swizzling by following the steps documented ",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/cloud-messaging/ios/client#method_swizzling_in"},"here"),"."),(0,a.kt)("h3",{id:"handle-disabled-method-swizzling"},"Handle disabled method swizzling"),(0,a.kt)("p",null,"Once you have disabled method swizzling, you\u2019ll need to explicitly map your APNs token to the FCM registration token. This can be achieved with the steps documented here."),(0,a.kt)("p",null,"If you wish to test APNS in a sandbox environment, you should map your token with the type ",(0,a.kt)("inlineCode",{parentName:"p"},"FIRMessagingAPNSTokenTypeSandbox")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// To test with Sandbox Account\n[[FIRMessaging messaging] setAPNSToken:deviceToken type:FIRMessagingAPNSTokenTypeSandbox];\n")),(0,a.kt)("h2",{id:"set-your-firebase-server-key-in-canvas"},"Set your Firebase Server key in Canvas"),(0,a.kt)("p",null,"Add the Firebase Server key for your Canvas project."),(0,a.kt)("h2",{id:"connect-bluedot-with-firebase"},"Connect Bluedot with Firebase"),(0,a.kt)("p",null,"To receive Real-time Push Notification, you need to connect Point SDK with Firebase Service by uploading Firebase Server key to Canvas web interface and subscribe the topic with Bluedot Project ID."),(0,a.kt)("h3",{id:"subscribe-the-topic-using-bluedot-project-id"},"Subscribe the topic using Bluedot Project ID"),(0,a.kt)("p",null,"To make sure that push notification will be delivered to your applications which is using specific Bluedot Project. Your client app needs to subscribe to the topic with Bluedot Project ID. The ",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/ios/firebasemessaging/interface_f_i_r_messaging.html"},"FIRMessaging")," class handles topic messaging functionality."),(0,a.kt)("p",null,"Also, your client needs to first register your app with both APNs and FCM to ensure that it can receive notifications."),(0,a.kt)("p",null,"To subscribe to a topic, implement the didReceiveRegistrationToken method in ",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/ios/firebasemessaging/api/reference/Protocols/FIRMessagingDelegate.html"},"FIRMessagingDelegate")," Protocol."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},'- (void)messaging:(FIRMessaging *)messaging didReceiveRegistrationToken:(NSString *)fcmToken {\n\xa0 \xa0 NSLog(@"Subcribing to Topic...");\n\xa0 \xa0 NSString *topic = [NSString stringWithFormat:@"%@", ProjectId];\n\xa0 \xa0 [[FIRMessaging messaging] subscribeToTopic: topic];\n}\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This makes an asynchronous request to the FCM backend and subscribes the client to the given topic. If the subscription request fails initially, FCM retries until it can subscribe to the topic successfully.")),(0,a.kt)("h2",{id:"bluedot-push-interface"},"Bluedot Push Interface"),(0,a.kt)("p",null,"When your client app has received the Real-time Push Notification, you need to pass the userInfo from the notification as a parameter to the method\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"notifyPushUpdateWithData:"),"\xa0from\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"BDLocationManager"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},"- (void)notifyPushUpdateWithData: (NSDictionary *)data;\n")),(0,a.kt)("p",null,"Put the method in ",(0,a.kt)("inlineCode",{parentName:"p"},"UNUserNotificationCenterDelegate userNotificationCenter:willPresentNotification:withCompletionHandler:")," to handle notifications received when the client app is in the foreground. The message is a ",(0,a.kt)("inlineCode",{parentName:"p"},"UNNotificationobject"),". Implement ",(0,a.kt)("inlineCode",{parentName:"p"},"FIRMessagingDelegate applicationReceivedRemoteMessage:")," to handle all data messages that are sent to the client. The message is a ",(0,a.kt)("inlineCode",{parentName:"p"},"FIRMessagingRemoteMessage")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},"// Receive displayed notifications\n#if defined(__IPHONE_10_0) && __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_10_0\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center\n       willPresentNotification:(UNNotification *)notification\n         withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler {\n    NSDictionary *userInfo = notification.request.content.userInfo;\n    [BDLocationManager.instance notifyPushUpdateWithData:userInfo];\n    ...\n}\n \n// Receive data message\n- (void)applicationReceivedRemoteMessage:(FIRMessagingRemoteMessage *)remoteMessage {\n    [BDLocationManager.instance notifyPushUpdateWithData:[remoteMessage appData]];\n    ...\n}\n#endif\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Point SDK will only utilize data of push notification sent with unique identifier confirming whether it is a Bluedot data, and will ignore any other data received which does not contain Bluedot\u2019s unique identifier.")))}p.isMDXComponent=!0}}]);