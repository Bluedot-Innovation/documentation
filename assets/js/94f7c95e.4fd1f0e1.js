"use strict";(self.webpackChunkdocs_test=self.webpackChunkdocs_test||[]).push([[5013],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function g(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=g(e,["components","mdxType","originalType","parentName"]),u=l(t),p=r,f=u["".concat(c,".").concat(p)]||u[p]||d[p]||i;return t?o.createElement(f,a(a({ref:n},s),{},{components:t})):o.createElement(f,a({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=p;var g={};for(var c in n)hasOwnProperty.call(n,c)&&(g[c]=n[c]);g.originalType=e,g[u]="string"==typeof e?e:r,a[1]=g;for(var l=2;l<i;l++)a[l]=t[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6044:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>g,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const i={},a="Geo-triggering",g={unversionedId:"Point SDK/Cordova/Geo-triggering",id:"Point SDK/Cordova/Geo-triggering",title:"Geo-triggering",description:"Geo-triggering allows for the automatic detection of location context change events (such as entering or exiting a geofence, or crossing a Geoline\u2122). For this capability, the SDK needs to be initialized and the app must have been granted location permission.",source:"@site/docs/Point SDK/Cordova/Geo-triggering.md",sourceDirName:"Point SDK/Cordova",slug:"/Point SDK/Cordova/Geo-triggering",permalink:"/Point SDK/Cordova/Geo-triggering",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Quick Start",permalink:"/Point SDK/Cordova/Quick Start"},next:{title:"Tempo",permalink:"/Point SDK/Cordova/Tempo"}},c={},l=[{value:"Start Geo-triggering",id:"start-geo-triggering",level:2},{value:"Receiving Geo-trigger events",id:"receiving-geo-trigger-events",level:2},{value:"Stop Geo-triggering",id:"stop-geo-triggering",level:2},{value:"Geo-triggering Status",id:"geo-triggering-status",level:2}],s={toc:l},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"geo-triggering"},"Geo-triggering"),(0,r.kt)("p",null,"Geo-triggering allows for the automatic detection of location context change events (such as entering or exiting a geofence, or crossing a Geoline\u2122). For this capability, the SDK needs to be initialized and the app must have been granted location permission."),(0,r.kt)("h2",{id:"start-geo-triggering"},"Start Geo-triggering"),(0,r.kt)("p",null,"To start geo-triggering:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function doStartGeoTriggering() \n{\n    // The SDK needs be initialized and the app must have location permissions.\n    if (device.platform === "iOS") {\n        io.bluedot.cordova.plugin.iOSStartGeoTriggering(\n            function () { console.log("Start Geotriggering Successful") },\n            function (error) { console.log("Start Geotriggering Failed with error: " + error) }\n        );\n    } else if (device.platform === "Android") {\n        const androidNotificationParams = {\n            channelId: "Bluedot Cordova",\n            channelName: "Bluedot Cordova",\n            title: "Bluedot Foreground Service - Geo-triggering",\n            content:\n              "This app is running a foreground service using location services",\n            notificationId: 123,\n          };\n\n        io.bluedot.cordova.plugin.androidStartGeoTriggering(\n            function () { console.log("Start Geotriggering Successful") },\n            function (error) { console.log("Start Geotriggering Failed with error: " + error) },\n            androidNotificationParams.channelId,\n            androidNotificationParams.channelName,\n            androidNotificationParams.title,\n            androidNotificationParams.content,\n            androidNotificationParams.notificationId\n        );\n   }\n    \n}\n')),(0,r.kt)("h2",{id:"receiving-geo-trigger-events"},"Receiving Geo-trigger events"),(0,r.kt)("p",null,"Register callback functions to receive Geo-triggering events."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"As entry events may occur immediately upon starting Geo-triggering, it is recommended to subscribe to the events before starting the Geo-triggering service.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function subscribeToGeoTriggeringEvents() {\n   // Register callbacks functions for receiving geo-triggering events\n   io.bluedot.cordova.plugin.zoneInfoUpdateCallback( zoneUpdateCallbackFunction );\n   io.bluedot.cordova.plugin.enteredZoneCallback( zoneEnteredCallbackFunction );\n   io.bluedot.cordova.plugin.exitedZoneCallback( zoneExitedCallbackFunction );\n \n   // Then start the Geo-triggering service.\n}\n\nfunction zoneUpdateCallbackFunction( zoneInfos ) {\n    console.log( "Zones updated for " + zoneInfos.length + " zones" );\n}\n\nfunction zoneEntered( fenceInfo, zoneInfo, locationInfo, willCheckOut, customData ) {\n    console.log("Zone entered");\n}\n\nfunction zoneExited( fenceInfo, zoneInfo, date, dwellTime, customData ) {\n    console.log("Zone exited");\n}\n')),(0,r.kt)("h2",{id:"stop-geo-triggering"},"Stop Geo-triggering"),(0,r.kt)("p",null,"If you only need geo-triggering for a limited period, once that period is over, you should stop the geo-triggering service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'io.bluedot.cordova.plugin.stopGeoTriggering(\n   function () { console.log("Stop Geotriggering Successful") },\n   function (error) { console.log("Stop Geotriggering Failed with error: " + error) }\n);\n')),(0,r.kt)("h2",{id:"geo-triggering-status"},"Geo-triggering Status"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isGeoTriggeringRunning")," method to check the status of the Geo-triggering service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'io.bluedot.cordova.plugin.isGeoTriggeringRunning(\n\xa0 \xa0 function (isRunning) { console.log("Is Geo Triggering Running: " + isRunning) }\n);\n')))}d.isMDXComponent=!0}}]);