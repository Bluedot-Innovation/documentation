"use strict";(self.webpackChunkdocs_test=self.webpackChunkdocs_test||[]).push([[2518],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=i,m=u["".concat(s,".").concat(g)]||u[g]||p[g]||r;return n?o.createElement(m,a(a({ref:t},d),{},{components:n})):o.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6415:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),i=(n(7294),n(3905));const r={},a="Migrating to 2.0.0 Guide",l={unversionedId:"Point SDK/React Native/Migration Guides/Migrating to 2.0.0 guide",id:"Point SDK/React Native/Migration Guides/Migrating to 2.0.0 guide",title:"Migrating to 2.0.0 Guide",description:"The Bluedot React Native wrapper version is a major rewrite of our APIs. It includes many updates such as:",source:"@site/docs/Point SDK/React Native/Migration Guides/Migrating to 2.0.0 guide.md",sourceDirName:"Point SDK/React Native/Migration Guides",slug:"/Point SDK/React Native/Migration Guides/Migrating to 2.0.0 guide",permalink:"/documentation/Point SDK/React Native/Migration Guides/Migrating to 2.0.0 guide",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Events List",permalink:"/documentation/Point SDK/React Native/Events List"},next:{title:"Version 1.1.7 Documentation",permalink:"/documentation/Point SDK/React Native/Migration Guides/Version 1.1.7 documentation"}},s={},c=[{value:"New / Updates in 2.0.0",id:"new--updates-in-200",level:2},{value:"\xa0Explicit calls to start &amp; stop Geo-triggering feature",id:"explicit-calls-to-start--stop-geo-triggering-feature",level:2},{value:"Notes",id:"notes",level:3},{value:"New Geo-triggering API",id:"new-geo-triggering-api",level:2},{value:"Receiving Geo-trigger events",id:"receiving-geo-trigger-events",level:2},{value:"Notes:",id:"notes-1",level:3},{value:"Updates to Tempo API",id:"updates-to-tempo-api",level:2},{value:"Receiving Tempo errors",id:"receiving-tempo-errors",level:2},{value:"Android: Set Foreground Service Notification",id:"android-set-foreground-service-notification",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"migrating-to-200-guide"},"Migrating to 2.0.0 Guide"),(0,i.kt)("p",null,"The Bluedot React Native wrapper version is a major rewrite of our APIs. It includes many updates such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A simple and easier way to initialize the Point SDK."),(0,i.kt)("li",{parentName:"ul"},"Giving you more control on when to start & stop Geo-triggering and Tempo features.")),(0,i.kt)("p",null,"Update to initialization call  "),(0,i.kt)("hr",null),(0,i.kt)("p",null,"The SDK authentication call has changed from:\xa0"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'BluedotPointSdk.authenticate( \n  "your_applicationId", \n  "Location permissions <Always | WhileInUse>", \n  () => console.log("Success callback"), \n  () => console.error("Error callback") \n);\n')),(0,i.kt)("p",null,"To:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'BluedotPointSdk.initialize(\n "your_projectId",\n () => console.log("Success callback"),\n () => console.log("Error callback")\n);\n')),(0,i.kt)("p",null,"To check if the SDK is initialized:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// Async / Await\nconst isBluedotSdkInitialized = await BluedotPointSdk.isInialized()\n\n// Promise\nBluedotPointSdk.isInitialized()\n .then((isInitialized) => console.log("Is the SDK initialized?", isInitialized));\n')),(0,i.kt)("h2",{id:"new--updates-in-200"},"New / Updates in 2.0.0"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Moving forward, ",(0,i.kt)("inlineCode",{parentName:"li"},"apiKey")," will be replaced by ",(0,i.kt)("inlineCode",{parentName:"li"},"projectId"),". You can find the ",(0,i.kt)("inlineCode",{parentName:"li"},"projectId")," in ",(0,i.kt)("a",{parentName:"li",href:"/documentation/Canvas/Overview"},"Canvas"),".\xa0"),(0,i.kt)("li",{parentName:"ul"},"Bluedot Point SDK ",(0,i.kt)("strong",{parentName:"li"},"no longer requests for OS location permissions on initialization")," as per the previous API.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We encourage you to requests the OS the location permissions that you require (Always or When in Use), at an opportune moment from within your app. For example, when a user places an order within the app, at this point you can start Geo-triggering tracking and as well requesting for location permission."),(0,i.kt)("li",{parentName:"ul"},"If you want to request ",(0,i.kt)("em",{parentName:"li"},"Always Allow")," permission immediately after the user grants the ",(0,i.kt)("em",{parentName:"li"},"When In Use")," permission level for iOS devices then please refer to changes from ",(0,i.kt)("em",{parentName:"li"},"react-native-permissions")," library ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/zoontek/react-native-permissions/pull/529/files#r550209147"},"here")))),(0,i.kt)("li",{parentName:"ul"},"The SDK will ",(0,i.kt)("strong",{parentName:"li"},"not")," start triggering Geofeatures immediately after initialization as per the previous API. You will have to make the call explicitly to start / stop Geo-triggering.")),(0,i.kt)("h2",{id:"explicit-calls-to-start--stop-geo-triggering-feature"},"\xa0Explicit calls to start & stop Geo-triggering feature"),(0,i.kt)("p",null,"In the version 2.0.0, we give more control to you on when to start and stop Geo-triggering features. To start and stop triggering Geofeatures, you will need to explicitly call the API.  "),(0,i.kt)("h3",{id:"notes"},"Notes"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"You can start the Geo-triggering feature only while your app is in the foreground."),(0,i.kt)("li",{parentName:"ol"},"Stopping Geo-triggering has the intended effect of stopping location services on the app, thereby conserving battery on your user\u2019s device, unless there\u2019s another Bluedot SDK service is active such as Tempo.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Once the stopGeoTriggering method is called the SDK will stop tracking the device. The deprecated logout method is no longer needed. The SDK will be initialized only once.")))),(0,i.kt)("h2",{id:"new-geo-triggering-api"},"New Geo-triggering API"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Button } from \'react-native\'\nimport BluedotPointSdk from \'bluedot-react-native\'\n\nexport default function App() {\n\xa0 // The SDK needs be initialized and the app must have location permissions.\n\xa0 const geoTriggeringService = new BluedotPointSdk.GeoTriggeringBuilder()\n\n\xa0 function handleStartGeoTriggering() {\n\xa0 \xa0 geoTriggeringService.start(\n\xa0 \xa0 \xa0 () => console.log("On Success Callback"),\n\xa0 \xa0 \xa0 () => console.error("On Error Callback"),\n\xa0 \xa0 )\n\xa0 }\n\n\xa0 return <Button title="Start Geo-Triggering" onPress={handleStartGeoTriggering} />\n}\n')),(0,i.kt)("h2",{id:"receiving-geo-trigger-events"},"Receiving Geo-trigger events"),(0,i.kt)("p",null,"The events to receive Geo-triggering events have been changed from:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// When device enters a Zone\nBluedotPointSdk.on("checkedIntoFence", (event) => console.log(event));\n\n// When device exits a Zone\nBluedotPointSdk.on("checkedOutFromFence", (event) => console.log(event));\n')),(0,i.kt)("p",null,"To:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// When device enters a Zone\nBluedotPointSdk.on("enterZone", (event) => console.log(event));\n\n// When device exits a Zone\nBluedotPointSdk.on("exitZone", (event) => console.log(event));\n')),(0,i.kt)("h3",{id:"notes-1"},"Notes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Moving forward, beacon related events will no longer be supported. You may continue to use the deprecated events to receive beacon related callbacks."),(0,i.kt)("li",{parentName:"ul"},"The zoneInfoUpdate will be called after start Geo-triggering API is called.")),(0,i.kt)("h2",{id:"updates-to-tempo-api"},"Updates to Tempo API"),(0,i.kt)("p",null,"The Tempo the API has changed from"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// Start Tempo\nBluedotPointSdk.startTempoTracking("destinationId", () => console.log("Callback"));\n\n// Stop Tempo\nBluedotPointSdk.stopTempoTracking();\n')),(0,i.kt)("p",null,"To:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Button, View } from \'react-native\'\nimport BluedotPointSdk from \'bluedot-react-native\'\n\nexport default function App() {\n\xa0 // The SDK needs be initialized and the app must have location permissions.\n\n\xa0 const tempoService = new BluedotPointSdk.TempoBuilder()\n\n\xa0 function handleStartTempo() {\n\xa0 \xa0 tempoService\n\xa0 \xa0 \xa0 // * The Android Foreground notfication is required by Tempo *\n\xa0 \xa0 \xa0 .androidNotification(\n\xa0       "Android notification channel Id",\n        "Android notification channel name",\n\xa0 \xa0 \xa0 \xa0 "Android notification title",\n\xa0 \xa0 \xa0 \xa0 "Android notification content"\n\xa0 \xa0 \xa0 )\xa0\n\xa0 \xa0 \xa0 .start(\n\xa0 \xa0 \xa0 \xa0 "Destination ID",\n\xa0 \xa0 \xa0 \xa0 () => console.log("On Success Callback"),\n\xa0 \xa0 \xa0 \xa0 () => console.error("On Error Callback"),\n\xa0 \xa0 \xa0 )\n\xa0 }\n\n\xa0 function handleStopTempo() {\n\xa0 \xa0 BluedotPointSdk.stopTempoTracking(\n\xa0 \xa0 \xa0 () => console.log("On Success Callback"),\n\xa0 \xa0 \xa0 () => console.log("On Error Callback")\n\xa0 \xa0 )\n\xa0 }\n\n\xa0 return (\n\xa0 \xa0 <View>\n\xa0 \xa0 \xa0 <Button title="Start Tempo" onPress={handleStartTempo} />\n\xa0 \xa0 \xa0 <Button title="Stop Tempo" onPress={handleStopTempo} /> \xa0\n\xa0 \xa0 </View>\n\xa0 )\xa0\n}\n')),(0,i.kt)("h2",{id:"receiving-tempo-errors"},"Receiving Tempo errors"),(0,i.kt)("p",null,"To receive the errors events while the Tempo feature is active you can subscribe to the following events:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'BluedotPointSdk.on("tempoTrackingDidExpire", (event) => console.log(event));\nBluedotPointSdk.on("tempoTrackingStoppedWithError", (event) => console.log(event));\n')),(0,i.kt)("h2",{id:"android-set-foreground-service-notification"},"Android: Set Foreground Service Notification"),(0,i.kt)("p",null,"To set the Foreground Service Notification for Android devices the API has changed from:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const channelId = 'Bluedot React Native'\nconst channelName = 'Bluedot React Native'\nconst title = 'Bluedot Foreground Service'\nconst content = \"This app is running a foreground service using location services\"\nconst shouldTargetAllApis = true\n\nBluedotPointSdk.setForegroundNotification(\n\xa0 channelId,\xa0\n\xa0 channelName,\xa0\n\xa0 title,\xa0\n\xa0 content,\n\xa0 shouldTargetAllApis\n)\n")),(0,i.kt)("p",null,"Now setting the Foreground notification is part of the GeoTriggeringBuilder and TempoBuilder classes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const channelId = "Bluedot React Native"\nconst channelName = "Bluedot React Native"\nconst title = \'Bluedot Foreground Service\'\nconst content = "This app is running a foreground service using location services"\nconst notificationId = "Bluedot Forground Service"\n\nconst geoTriggeringService = new BluedotPointSdk.GeoTriggeringBuilder();\n\nfunction handleStartGeoTriggering() {\n\xa0 geoTriggeringService\n\xa0 .androidNotification(\xa0\n\xa0 \xa0 channelId,\n\xa0 \xa0 channelName,\n\xa0 \xa0 title,\n\xa0 \xa0 content,\n\xa0 \xa0 notificationId // Optional\n\xa0 )\xa0\n\xa0 .start(\n\xa0 \xa0 () => console.log("On Success Callback"),\n\xa0 \xa0 () => console.error("On Error Callback"),\n\xa0 )\n}\n\nconst tempoService = new BluedotPointSdk.TempoBuilder()\n\nfunction handleStartTempo() {\n\xa0 tempoService\n\xa0 \xa0 // * The Android Foreground notfication is required by Tempo *\n\xa0 \xa0 .androidNotification(\xa0\n\xa0 \xa0 \xa0 channelId,\n\xa0 \xa0 \xa0 channelName,\n\xa0 \xa0 \xa0 title,\n\xa0 \xa0 \xa0 content,\n\xa0 \xa0 \xa0 notificationId // Optional\n\xa0 \xa0 )\xa0\n\xa0 \xa0 .start(\n\xa0 \xa0 \xa0 "Destination ID",\n\xa0 \xa0 \xa0 () => console.log("On Success Callback"),\n\xa0 \xa0 \xa0 () => console.error("On Error Callback"),\n\xa0 \xa0 )\n}\n')))}p.isMDXComponent=!0}}]);