"use strict";(self.webpackChunkbluedot_docs=self.webpackChunkbluedot_docs||[]).push([[1837],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),g=a,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||i;return t?r.createElement(m,o(o({ref:n},p),{},{components:t})):r.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},15015:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const i={pagination_next:"Chat AI/Android Guide",pagination_prev:"Chat AI/Quick Start"},o="iOS Guide",s={unversionedId:"Chat AI/iOS Guide",id:"Chat AI/iOS Guide",title:"iOS Guide",description:"This page walks you through integrating Rezolve Commerce Brain with your iOS app and covers creating chat AI sessions, and handling real-time responses.",source:"@site/docs/Chat AI/iOS Guide.md",sourceDirName:"Chat AI",slug:"/Chat AI/iOS Guide",permalink:"/Chat AI/iOS Guide",draft:!1,tags:[],version:"current",frontMatter:{pagination_next:"Chat AI/Android Guide",pagination_prev:"Chat AI/Quick Start"},sidebar:"defaultSidebar",previous:{title:"Quickstart",permalink:"/Chat AI/Quick Start"},next:{title:"Android Guide",permalink:"/Chat AI/Android Guide"}},c={},l=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Creating a Chat Session",id:"creating-a-chat-session",level:2},{value:"Sending Messages &amp; Receiving Streaming Responses",id:"sending-messages--receiving-streaming-responses",level:3},{value:"Option 1: Swift Concurrency (async/await)",id:"option-1-swift-concurrency-asyncawait",level:4},{value:"Option 2: Closures",id:"option-2-closures",level:4},{value:"Best Practices",id:"best-practices",level:3}],p={toc:l},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ios-guide"},"iOS Guide"),(0,a.kt)("p",null,"This page walks you through integrating ",(0,a.kt)("strong",{parentName:"p"},"Rezolve Commerce Brain")," with your iOS app and covers creating chat AI sessions, and handling real-time responses."),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"iOS 15.0+")),(0,a.kt)("li",{parentName:"ul"},"The Rezolve AI integration is already configured in your project")),(0,a.kt)("h2",{id:"creating-a-chat-session"},"Creating a Chat Session"),(0,a.kt)("p",null,"You can create a new chat session at any time through the ",(0,a.kt)("inlineCode",{parentName:"p"},"brainAI")," instance on ",(0,a.kt)("inlineCode",{parentName:"p"},"BDLocationManager"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"// Grab the BrainAI instance from BDLocationManager\nlet brainAI = BDLocationManager.instance.brainAI\n\n// Create a new chat session\nlet chat = brainAI.createNewChat()\n\n")),(0,a.kt)("p",null,"Each session has a unique ",(0,a.kt)("inlineCode",{parentName:"p"},"sessionID")," in URN format (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"urn:uuid:9a652678-4616-475d-af12-aca21cfbe06d"),")."),(0,a.kt)("p",null,"If you need to reference an existing session:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let existingChat = brainAI.getChatWithSessionID("urn:uuid:9a652678-4616-475d-af12-aca21cfbe06d")\n\n')),(0,a.kt)("p",null,"When you\u2019re done with a session, you can close it to free up resources:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'brainAI.closeChatWithSessionID("urn:uuid:9a652678-4616-475d-af12-aca21cfbe06d")\n\n')),(0,a.kt)("h3",{id:"sending-messages--receiving-streaming-responses"},"Sending Messages & Receiving Streaming Responses"),(0,a.kt)("p",null,"Once you have a ",(0,a.kt)("inlineCode",{parentName:"p"},"Chat")," object, you can send messages to ",(0,a.kt)("strong",{parentName:"p"},"Rezolve Commerce Brain"),". The responses arrive as a stream of ",(0,a.kt)("strong",{parentName:"p"},"StreamingResponseDto")," objects, each representing a partial chunk of the final answer."),(0,a.kt)("h4",{id:"option-1-swift-concurrency-asyncawait"},"Option 1: Swift Concurrency (async/await)"),(0,a.kt)("p",null,"Best for projects targeting iOS 15.0 or later:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'do {\n    let responseStream = try await chat.sendMessage("What promotions are available today?")\n\n    // responseStream is an AsyncThrowingStream<StreamingResponseDto, Error>\n    for try await chunk in responseStream {\n        // Each chunk is a partial response\n        print("Chunk received: \\(chunk.response)")\n    }\n} catch {\n    // Handle any network or streaming errors\n    print("Error: \\(error.localizedDescription)")\n}\n\n')),(0,a.kt)("h4",{id:"option-2-closures"},"Option 2: Closures"),(0,a.kt)("p",null,"If your deployment target is below iOS 15 or you prefer a closure-based approach:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'chat.sendMessage("Any recommended products?", completion: { streamingResponseDto, error in\n    if let error = error {\n        print("Error: \\(error.localizedDescription)")\n        return\n    }\n\n    if let dto = streamingResponseDto {\n        print("Chunk received: \\(dto.response)")\n    }\n})\n\n')),(0,a.kt)("h3",{id:"best-practices"},"Best Practices"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Reuse Chat Sessions"),": Keep a single chat session open for an ongoing conversation to maintain context."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Error Handling"),": Watch for network errors or timeouts during streaming."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"User Experience"),": Consider displaying responses in real time as chunks arrive for a more engaging conversation flow.")))}d.isMDXComponent=!0}}]);