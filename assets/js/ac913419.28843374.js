"use strict";(self.webpackChunkbluedot_docs=self.webpackChunkbluedot_docs||[]).push([[8362],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?i.createElement(g,a(a({ref:t},c),{},{components:n})):i.createElement(g,a({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5675:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=n(7462),r=(n(7294),n(3905));const o={},a="iOS Integration",l={unversionedId:"integrations/Airship/iOS",id:"integrations/Airship/iOS",title:"iOS Integration",description:"Getting started",source:"@site/docs/integrations/Airship/iOS.md",sourceDirName:"integrations/Airship",slug:"/integrations/Airship/iOS",permalink:"/integrations/Airship/iOS",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Android Integration",permalink:"/integrations/Airship/Android"},next:{title:"Attentive Integration",permalink:"/integrations/Attentive/Overview"}},p={},s=[{value:"Getting started",id:"getting-started",level:2},{value:"Integration Example",id:"integration-example",level:3},{value:"Integrate Airship SDK into your App",id:"integrate-airship-sdk-into-your-app",level:3},{value:"Integrate your project with Bluedot PointSDK",id:"integrate-your-project-with-bluedot-pointsdk",level:3},{value:"Interaction between Airship SDK and Bluedot PointSDK",id:"interaction-between-airship-sdk-and-bluedot-pointsdk",level:2},{value:"Start Airship Services",id:"start-airship-services",level:3},{value:"Setup Bluedot Location Services",id:"setup-bluedot-location-services",level:3},{value:"Use case",id:"use-case",level:3}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ios-integration"},"iOS Integration"),(0,r.kt)("h2",{id:"getting-started"},"Getting started"),(0,r.kt)("h3",{id:"integration-example"},"Integration Example"),(0,r.kt)("p",null,"You can find our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Bluedot-Innovation/PointSDK-UrbanAirshipIntegrationExample-iOS"},"Bluedot \u2013 Airship iOS Example on GitHub")," or follow the steps below to integrate Airship and Bluedot PointSDK."),(0,r.kt)("h3",{id:"integrate-airship-sdk-into-your-app"},"Integrate Airship SDK into your App"),(0,r.kt)("p",null,"Details on integrating the Airship SDK can be found on their documentation website ",(0,r.kt)("a",{parentName:"p",href:"https://docs.airship.com/platform/ios/getting-started/"},"here"),"."),(0,r.kt)("h3",{id:"integrate-your-project-with-bluedot-pointsdk"},"Integrate your project with Bluedot PointSDK"),(0,r.kt)("p",null,"To integrate PointSDK, please refer to the integration steps ",(0,r.kt)("a",{parentName:"p",href:"/Point%20SDK/iOS/Quick%20Start"},"here")),(0,r.kt)("h2",{id:"interaction-between-airship-sdk-and-bluedot-pointsdk"},"Interaction between Airship SDK and Bluedot PointSDK"),(0,r.kt)("h3",{id:"start-airship-services"},"Start Airship Services"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Import AirshipKit to your class."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"import AirshipKit"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Take off Airship Services from\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"application:didFinishLaunchingWithOptions:"),"\xa0method in your\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"AppDelegate"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'// Create Airship config\nlet config = Config()\n\n// Set production and development separately.\n// Alternatively you can use AirshipConfig.plist file to store all Airship configurations.\n// More details please see https://docs.airship.com/platform/mobile/setup/sdk/ios/\nconfig.developmentAppKey = "YOUR DEV APP KEY"\nconfig.developmentAppSecret = "YOUR DEV APP SECRET"\n\nconfig.productionAppKey = "YOUR PRODUCTION APP KEY"\nconfig.productionAppSecret = "YOUR PRODUCTION APP SECRET"\n\n// Change to true to use the production appKey/appSecret\nconfig.inProduction = false\n\n// Set site. Either .us or .eu\nconfig.site = .us\n\n// Allow lists. Use * to allow anything\nconfig.urlAllowList = ["*"]\n\n// Call takeOff\nAirship.takeOff(config, launchOptions: launchOptions)\n\n// User notifications will not be enabled until userPushNotificationsEnabled is\n// set YES on UAPush. Once enabled, the setting will be persisted and the user\n// will be prompted to allow notifications. Normally, you should wait for a more\n// appropriate time to enable push to increase the likelihood that the user will\n// accept notifications.\nAirship.push.userPushNotificationsEnabled = true\n')),(0,r.kt)("h3",{id:"setup-bluedot-location-services"},"Setup Bluedot Location Services"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Import Bluedot PointSDK."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"import BDPointSDK"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Introducing\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"BDLocationManager"),"\xa0which is the entry-point for an app to start using PointSDK."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"BDLocationManager.instance()?.geoTriggeringEventDelegate = self\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Initialize the PointSDK"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-swift"},' if BDLocationManager.instance()?.isInitialized() == false {\n   BDLocationManager.instance()?.initialize(\n     withProjectId: projectId) { error in\n     guard error == nil else {\n       print("Initialisation Error: \\(String(describing: error?.localizedDescription))") \n       return\n     }\n     print( "Initialised successfully with Point sdk" )\n   }\n }\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Start Geo-triggering feature after PointSDK is initialized:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'BDLocationManager.instance()?.startGeoTriggering() { error in \n  guard error == nil else {\n    print("There was an error starting geo-triggering with the Bluedot SDK: \\\\(error.localizedDescription)")\n    return\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Receiving Geo-trigger events"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'extension AppDelegate: BDPGeoTriggeringEventDelegate {\n  func didEnterZone(_ enterEvent: BDZoneEntryEvent){ \n    print("I have entered a zone.")\n  }\n\n  func didExitZone(_ exitEvent: BDZoneExitEvent) {\n    print("I have exited a zone")\n  }\n}\n')))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Only\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"Custom Actions"),"\xa0defined for a Zone will trigger\xa0",(0,r.kt)("em",{parentName:"p"},"Check-in"),"\xa0and\xa0",(0,r.kt)("em",{parentName:"p"},"Check-out"),"\xa0callbacks.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Check-out"),"\xa0does not apply to Geoline\u2122."),(0,r.kt)("h3",{id:"use-case"},"Use case"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Objective**"),":**\xa0Trigger an\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"automated message"),"\xa0pushed to end-user when the device checks in a\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"geofence"),"\xa0or\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"Geoline\u2122"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Setting automated message:"),"\xa0Setup via ",(0,r.kt)("inlineCode",{parentName:"p"},"Airship"),"\xa0portal will be triggered when a new event is posted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'func didEnterZone(_ enterEvent: BDZoneEntryEvent){\n\xa0 \xa0 **let** customEvent = CustomEvent(name:"bluedot_place_entered")\n\xa0 \xa0 customEvent.interactionType = "location"\n\xa0 \xa0 customEvent.interactionID = enterEvent.zone().id\n\n\xa0 \xa0 // Set Bluedot Zone Custom Data\n\xa0 \xa0 **var** bluedotProperties = [String : String]()\n\xa0 \xa0 enterEvent.zone().customData?.forEach { (key, value) **in**\n\xa0 \xa0 \xa0 \xa0 bluedotProperties[key] = value\n\xa0 \xa0 }\n\xa0 \xa0 bluedotProperties["bluedot_zone_name"] = enterEvent.zone().name\n\xa0\xa0 \xa0// assign custom event properties\n    customEvent.properties = bluedotProperties\n\xa0 \xa0 // Record the event in analytics\n\xa0 \xa0 customEvent.track()\n}\n\nfunc didExitZone(_ exitEvent: BDZoneExitEvent) {\n\xa0 \xa0 **let** customEvent = CustomEvent(name:"bluedot_place_exited")\n\xa0 \xa0 customEvent.interactionType = "location"\n\xa0 \xa0 customEvent.interactionID = exitEvent.zone().id\n\xa0\xa0 \xa0\n\xa0 \xa0 // Set Bluedot Zone Custom Data\n\xa0 \xa0 **var** bluedotProperties = [String : String]()\n\xa0 \xa0 exitEvent.zone().customData?.forEach { (key, value) **in**\n\xa0 \xa0 \xa0 \xa0 bluedotProperties[key] = value\n\xa0 \xa0 }\n\xa0 \xa0 bluedotProperties["bluedot_zone_name"] = exitEvent.zone().name\n\n\xa0 \xa0 // set dwell time\n\xa0 \xa0 bluedotProperties["dwell_time"] = NSNumber(value: exitEvent.duration).stringValue\n\xa0\xa0 \xa0// assign custom event properties\n    customEvent.properties = bluedotProperties\n\xa0 \xa0 // Record the event in analytics\n\xa0 \xa0 customEvent.track()\n}\n')))}d.isMDXComponent=!0}}]);