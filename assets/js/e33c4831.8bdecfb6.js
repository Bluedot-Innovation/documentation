"use strict";(self.webpackChunkbluedot_docs=self.webpackChunkbluedot_docs||[]).push([[8959],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),g=i,m=p["".concat(l,".").concat(g)]||p[g]||u[g]||a;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},2653:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const a={},o="Android Integration",s={unversionedId:"integrations/Braze/Android",id:"integrations/Braze/Android",title:"Android Integration",description:"Getting Started",source:"@site/docs/integrations/Braze/Android.md",sourceDirName:"integrations/Braze",slug:"/integrations/Braze/Android",permalink:"/integrations/Braze/Android",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Braze Integration",permalink:"/integrations/Braze/Overview"},next:{title:"iOS Integration",permalink:"/integrations/Braze/iOS"}},l={},d=[{value:"Getting Started",id:"getting-started",level:2},{value:"Integrate Bluedot Point SDK in your Project",id:"integrate-bluedot-point-sdk-in-your-project",level:2},{value:"Interaction between Braze SDK and Bluedot Point SDK",id:"interaction-between-braze-sdk-and-bluedot-point-sdk",level:2}],c={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"android-integration"},"Android Integration"),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"1",".","\xa0Add the dependency in the app's build gradle add"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gradle"},'implementation "com.braze:android-sdk-ui:+"\nimplementation "com.braze:android-sdk-location:+"\n')),(0,i.kt)("p",null,"2","."," Create ",(0,i.kt)("inlineCode",{parentName:"p"},"braze.xml")," under the ",(0,i.kt)("inlineCode",{parentName:"p"},"res/values")," folder and add the following code. Create a Braze Android App and get the API key and replace it in the ",(0,i.kt)("inlineCode",{parentName:"p"},"\u201cYOUR-APP-IDENTIFIER-API-KEY\u201d"),". Also, replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"\u201cYOUR-BRAZE-ENDPOINT\u201d")," with the custom endpoint from Braze."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8"?>\n<resources>\n    <string name="com_braze_api_key">YOUR-APP-IDENTIFIER-API-KEY</string>\n    <string translatable="false" name="com_braze_custom_endpoint">YOUR-BRAZE-ENDPOINT</string>\n    <bool name="com_braze_enable_location_collection">true</bool>\n    <bool name="com_braze_fallback_firebase_cloud_messaging_service_enabled">true</bool>\n    <string name="com_braze_fallback_firebase_cloud_messaging_service_classpath">com.company.OurFirebaseMessagingService</string>\n</resources>\n')),(0,i.kt)("p",null,"3","."," In the ",(0,i.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml")," add the following:",(0,i.kt)("br",{parentName:"p"}),"\n","a. The following permissions are required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />\n<uses-permission android:name="android.permission.INTERNET" />\n<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />\n')),(0,i.kt)("p",null,"b. The following braze service should be included to handle push receipt and open intents."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<service android:name="com.braze.push.BrazeFirebaseMessagingService"\n  android:exported="false">\n  <intent-filter>\n    <action android:name="com.google.firebase.MESSAGING_EVENT" />\n  </intent-filter>\n</service>\n')),(0,i.kt)("h2",{id:"integrate-bluedot-point-sdk-in-your-project"},"Integrate Bluedot Point SDK in your Project"),(0,i.kt)("p",null,"To integrate Bluedot Point SDK in your project, please click ",(0,i.kt)("a",{parentName:"p",href:"/Point%20SDK/Android/Quick%20Start"},"here")),(0,i.kt)("h2",{id:"interaction-between-braze-sdk-and-bluedot-point-sdk"},"Interaction between Braze SDK and Bluedot Point SDK"),(0,i.kt)("p",null,"1","."," We need to ask the user to give permission to use the location services. To do that, create a ",(0,i.kt)("inlineCode",{parentName:"p"},"RequestPermissionActivity.kt")," and then add the below code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"internal val PERMISSION_REQUEST_CODE = 1\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n\n    //Request permission required for location\n    ActivityCompat.requestPermissions(\n        this,\n        arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION),\n        PERMISSION_REQUEST_CODE\n    )\n}\n\noverride fun onRequestPermissionsResult(requestCode: Int, permissions: Array, grantResults: IntArray) {\n    super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n    when (requestCode) {\n        PERMISSION_REQUEST_CODE -> if (grantResults.size > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n            (application as MainApplication).initPointSDK()\n\n        } else {\n            //Permissions denied\n\n        }\n    }\n    finish()\n}\n")),(0,i.kt)("p",null,"2","."," We then create another class which will implements Bluedot ",(0,i.kt)("inlineCode",{parentName:"p"},"InitializationResultListener")," and upon SDK initialisation, calls Braze\u2019s changeUser API. To do that create ",(0,i.kt)("inlineCode",{parentName:"p"},"MainApplication.kt")," class and add the below code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MainApplication : Application(), InitializationResultListener {\n\n    private lateinit var mServiceManager: ServiceManager\n    private val projectId = BLUEDOT-PROJECT-ID\n\n    override fun onCreate() {\n        super.onCreate()\n\n        registerActivityLifecycleCallbacks(BrazeActivityLifecycleCallbackListener())\n\n        // Initialize Bluedot Point SDK\n        initPointSDK()\n    }\n\n    fun initPointSDK() {\n        val checkPermissionFine = \n            ActivityCompat.checkSelfPermission(applicationContext, Manifest.permission.ACCESS_FINE_LOCATION) \n\n        if (checkPermissionFine == PackageManager.PERMISSION_GRANTED) { \n            mServiceManager = ServiceManager.getInstance(this) \n            if (!mServiceManager.isBluedotServiceInitialized) { \n                mServiceManager.initialize(projectId, this) \n            } \n        } else { \n            requestPermissions() \n        }\n    }\n\n    private fun requestPermissions() {\n        val intent = Intent(applicationContext, RequestPermissionActivity::class.java)\n        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\n        startActivity(intent)\n    }\n}    \n")),(0,i.kt)("p",null,"This method is called when Bluedot Point service started successfully, your app logic code using the Bluedot service could start from here. Replace \u201cBRAZE_USER_ID\u201d with the Braze user account."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'override fun onInitializationFinished(error: BDError?) {\n    if (error != null) {\n        Toast.makeText(\n            applicationContext,\n            "Bluedot Point SDK initialization error: ${error.reason}",\n            Toast.LENGTH_LONG\n        ).show()\n        return\n    }\n\n    Braze.getInstance(this).changeUser(BRAZE_USER_ID)\n    println("Bluedot Point SDK authenticated")\n}\n')),(0,i.kt)("p",null,"3","."," Next, we create a class which will receive Bluedot GeoTrigger events, which we will then log the event via the Braze API. To do that create ",(0,i.kt)("inlineCode",{parentName:"p"},"BluedotGeoTriggerReceiver.kt")," class and add the below code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class BluedotGeoTriggerReceiver: GeoTriggeringEventReceiver() {\n    private val customEventEntry = YOUR_CUSTOM_ENTRY_EVENT_NAME\n    private val customEventExit = YOUR_CUSTOM_EXIT_EVENT_NAME\n\n   override fun onZoneEntryEvent(geoTriggerEvent: GeoTriggerEvent, context: Context) {\n        println("Zone ${geoTriggerEvent.zoneInfo.name}, fence ${geoTriggerEvent.entryEvent()?.fenceName} entered at: ${Date()}")\n\n        val eventProperties = BrazeProperties()\n        eventProperties.addProperty("zone_id", geoTriggerEvent.zoneInfo.id)\n        eventProperties.addProperty("zone_name", geoTriggerEvent.zoneInfo.name)\n        eventProperties.addProperty("latitude",\n            geoTriggerEvent.entryEvent()?.locations?.get(0)?.latitude\n        )\n        eventProperties.addProperty("longitude", geoTriggerEvent.entryEvent()?.locations?.get(0)?.longitude)\n        eventProperties.addProperty("fence_id", geoTriggerEvent.entryEvent()?.fenceId)\n        eventProperties.addProperty("fence_name", geoTriggerEvent.entryEvent()?.fenceName)\n\n        geoTriggerEvent.zoneInfo.customData?.forEach { data ->\n            eventProperties.addProperty(data.key, data.value)\n        }\n\n        Braze.getInstance(context).logCustomEvent(customEventEntry, eventProperties)\n    }\n\n    override fun onZoneExitEvent(geoTriggerEvent: GeoTriggerEvent, context: Context) {\n        println("Zone ${geoTriggerEvent.zoneInfo.name}, fence ${geoTriggerEvent.exitEvent()?.fenceName} exited at: ${Date()}")\n\n        val eventProperties = BrazeProperties()\n        eventProperties.addProperty("zone_id", geoTriggerEvent.zoneInfo.id)\n        eventProperties.addProperty("zone_name", geoTriggerEvent.zoneInfo.name)\n        eventProperties.addProperty("dwellTime", geoTriggerEvent.exitEvent()?.dwellTime)\n        eventProperties.addProperty("fence_id", geoTriggerEvent.exitEvent()?.fenceId)\n        eventProperties.addProperty("fence_name", geoTriggerEvent.exitEvent()?.fenceName)\n\n        geoTriggerEvent.zoneInfo.customData.forEach { data ->\n            eventProperties.addProperty(data.key, data.value)\n        }\n\n        Braze.getInstance(context).logCustomEvent(customEventExit, eventProperties)\n    }\n}\n')))}u.isMDXComponent=!0}}]);