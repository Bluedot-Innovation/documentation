"use strict";(self.webpackChunkbluedot_docs=self.webpackChunkbluedot_docs||[]).push([[8174],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return n?o.createElement(g,i(i({ref:t},p),{},{components:n})):o.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},40597:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=n(87462),a=(n(67294),n(3905));const r={},i="Tempo",l={unversionedId:"versions/Point SDK 15/Flutter/Tempo",id:"versions/Point SDK 15/Flutter/Tempo",title:"Tempo",description:"Tempo allows active tracking of a user\u2019s location, as well as live ETA estimation.",source:"@site/docs/versions/Point SDK 15/Flutter/Tempo.md",sourceDirName:"versions/Point SDK 15/Flutter",slug:"/versions/Point SDK 15/Flutter/Tempo",permalink:"/versions/Point SDK 15/Flutter/Tempo",draft:!1,tags:[],version:"current",frontMatter:{}},s={},d=[{value:"Start Tempo",id:"start-tempo",level:2},{value:"For Android a foreground service notification is also required.",id:"for-android-a-foreground-service-notification-is-also-required",level:3},{value:"Receiving Tempo events",id:"receiving-tempo-events",level:2},{value:"Stop Tempo",id:"stop-tempo",level:2},{value:"Tempo Status",id:"tempo-status",level:2},{value:"Example",id:"example",level:2}],p={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tempo"},"Tempo"),(0,a.kt)("p",null,"Tempo allows active tracking of a user\u2019s location, as well as live ETA estimation."),(0,a.kt)("h2",{id:"start-tempo"},"Start Tempo"),(0,a.kt)("p",null,"For this capability, the SDK needs to be initialized and the app must have location permission. You also need Tempo to be enabled for your Bluedot Account and can see the Tempo section in the Projects List page of your Canvas account. If that is not visible and you want to use this capability, please contact your Bluedot CX representative."),(0,a.kt)("h3",{id:"for-android-a-foreground-service-notification-is-also-required"},"For Android a ",(0,a.kt)("a",{parentName:"h3",href:"/versions/Point%20SDK%2015/Android/Location%20Permission%20&%20Notifications%20Best%20Practices"},"foreground service notification")," is also required."),(0,a.kt)("p",null,"Tempo also requires Destination IDs to be defined, which ",(0,a.kt)("a",{parentName:"p",href:"/Tempo/Create%20your%20destinations"},"you can learn about here"),"."),(0,a.kt)("p",null,"To start tempo on foreground mode, you have to set notification details as below."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Parameter")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Type")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Description")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"channelId")),(0,a.kt)("td",{parentName:"tr",align:null},"String?"),(0,a.kt)("td",{parentName:"tr",align:null},"The channel id of the notification..")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"channelName")),(0,a.kt)("td",{parentName:"tr",align:null},"String?"),(0,a.kt)("td",{parentName:"tr",align:null},"The channel name of the notification.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"androidNotificationTitle")),(0,a.kt)("td",{parentName:"tr",align:null},"String?"),(0,a.kt)("td",{parentName:"tr",align:null},"The title of the notification.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"androidNotificationContent")),(0,a.kt)("td",{parentName:"tr",align:null},"String?"),(0,a.kt)("td",{parentName:"tr",align:null},"The content of the notification.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"androidNotificationId")),(0,a.kt)("td",{parentName:"tr",align:null},"Int?"),(0,a.kt)("td",{parentName:"tr",align:null},"The notification Id of the notification.")))),(0,a.kt)("p",null,"And start Tempo by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"TempoBuilder")," \xa0class as below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"String destinationId = 'Your destination Id';String channelId = 'Your channel Id';\nString channelName = 'Your channel Name';\nString androidNotificationTitle = 'Your notification title';\nString androidNotificationContent = 'Your notification content';\nint androidNotificationId = 123; // Will be -1 by default if set to null. BluedotPointSdk.instance.tempoBuilder() \n.androidNotification(channelId, channelName, androidNotificationTitle, androidNotificationContent, androidNotificationId) \n.start(destinationId).then((value) { \n  // Successfully started tempo tracking \n  debugPrint('Tempo has been started successfully'); \n}).catchError((error) { \n  // Failed to start tempo tracking, handle error here \n  debugPrint('Failed to start tempo. Error $error'); \n});\n")),(0,a.kt)("h2",{id:"receiving-tempo-events"},"Receiving Tempo events"),(0,a.kt)("p",null,"The Tempo service does not issue events under normal operation. Instead, it only issues events if there is an error with the operation. Tracking events are instead delivered via webhook, as configured in the Canvas UI."),(0,a.kt)("p",null,"You can listen to receive the Tempo events\xa0as below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"const tempoEventChannel = MethodChannel(BluedotPointSdk.tempo);\ntempoEventChannel.setMethodCallHandler((MethodCall call) async {\n  var args = call.arguments;\n  switch (call.method) {\n    case TempoEvents.tempoTrackingStoppedWithError:\n      // Handler error\n      break;\n    default:\n      break;\n  }\n});\n")),(0,a.kt)("p",null,"To see the full list of supported events please refer to ",(0,a.kt)("a",{parentName:"p",href:"/versions/Point%20SDK%2015/Flutter/Events%20List"},"Flutter Events List.")),(0,a.kt)("h2",{id:"stop-tempo"},"Stop Tempo"),(0,a.kt)("p",null,"Once the Tempo service is no longer needed, you can stop the service."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"BluedotPointSdk.instance.stopTempoTracking().then((value) {\n  // Successfully stopped tempo tracking\n  debugPrint('Tempo has been stopped');\n}).catchError((error) {\n  // Failed to stop tempo tracking, handle error here\n  debugPrint('Failed to stop tempo tracking. Error $error');\n});\n")),(0,a.kt)("h2",{id:"tempo-status"},"Tempo Status"),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"isTempoRunning")," method to check the status of the Tempo service. It will return a boolean value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"BluedotPointSdk.instance.isTempoRunning().then((value) {\n  debugPrint('Is Tempo Running: $value');\n});\n")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:bluedot_point_sdk/bluedot_point_sdk.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nclass TempoPage extends StatefulWidget {\n  const TempoPage({Key? key}) : super(key: key);\n\n  @override\n  State<TempoPage> createState() => _TempoPageState();\n}\n\nclass _TempoPageState extends State<TempoPage> {\n  bool _isTempoRunning = false;\n\n  /// Start tempo tracking\n  void _startTempo() {\n      String destinationId = 'Your destination Id';\n      String channelId = 'Your channel Id';\n      String channelName = 'Your channel Name';\n      String androidNotificationTitle = 'Your notification title';\n      String androidNotificationContent = 'Your notification content';\n      int androidNotificationId = 123; // Will be -1 by default if set to null. // Set custom event metadata.\n      // We suggest to set the Custom Event Meta Data before starting GeoTriggering or Tempo.\n      var metadata = {\n        'hs_orderId': 'Order Id',\n        'hs_Customer Name': 'Customer Name'\n      };\n\n      BluedotPointSdk.instance.setCustomEventMetaData(metadata);\n\n      BluedotPointSdk.instance\n          .tempoBuilder()\n          .androidNotification(channelId, channelName, androidNotificationTitle,\n          androidNotificationContent, androidNotificationId)\n          .start(destinationId)\n          .then((value) {\n        // Successfully started tempo tracking\n        debugPrint('Tempo has been started successfully');\n      }).catchError((error) {\n        // Failed to start tempo tracking, handle error here\n        debugPrint('Failed to start tempo. Error $error');\n      });\n  }\n\n  /// Stop tempo tracking\n  void _stopTempo() {\n    BluedotPointSdk.instance.stopTempoTracking().then((value) {\n      // Successfully stopped tempo tracking\n      debugPrint('Tempo has been stopped');\n    }).catchError((error) {\n      // Failed to stop tempo tracking, handle error here\n      debugPrint('Failed to stop tempo tracking. Error $error');\n    });\n  }\n\n  void _updateTempoStatus() {\n    BluedotPointSdk.instance.isTempoRunning().then((value) {\n      setState(() {\n        _isTempoRunning = value;\n      });\n    });\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    // Listen to tempo events\n    const tempoEventChannel = MethodChannel(BluedotPointSdk.tempo);\n    tempoEventChannel.setMethodCallHandler((MethodCall call) async {\n      var args = call.arguments;\n      switch (call.method) {\n        case TempoEvents.tempoTrackingStoppedWithError:\n          // Handler error\n          debugPrint('Tempo Tracking Stopped With Error. Error $args');\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        Text('Is Tempo Running: $_isTempoRunning'),\n        ElevatedButton(onPressed: _startTempo, child: const Text('Start Tempo')),\n        ElevatedButton(onPressed: _stopTempo, child: const Text('Stop Tempo')),\n        ElevatedButton(onPressed: _updateTempoStatus, child: const Text('Update Tempo Status')),\n      ],\n    );\n  }\n}\n")))}u.isMDXComponent=!0}}]);