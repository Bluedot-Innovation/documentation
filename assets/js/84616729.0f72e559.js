"use strict";(self.webpackChunkbluedot_docs=self.webpackChunkbluedot_docs||[]).push([[876],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||r;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},86143:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(87462),a=(n(67294),n(3905));const r={},i="Features",l={unversionedId:"Point SDK/React Native/Features",id:"Point SDK/React Native/Features",title:"Features",description:"*   Custom Event Metadata",source:"@site/docs/Point SDK/React Native/Features.md",sourceDirName:"Point SDK/React Native",slug:"/Point SDK/React Native/Features",permalink:"/Point SDK/React Native/Features",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Tempo",permalink:"/Point SDK/React Native/Tempo"},next:{title:"Events List",permalink:"/Point SDK/React Native/Events List"}},s={},c=[{value:"Custom Event Metadata",id:"custom-event-metadata",level:2},{value:"Enable / Disable Zones",id:"enable--disable-zones",level:2},{value:"Android Features",id:"android-features",level:2},{value:"Foreground Notification",id:"foreground-notification",level:3},{value:"iOS Features",id:"ios-features",level:2},{value:"App Restart Notification",id:"app-restart-notification",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"features"},"Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Custom Event Metadata"),(0,a.kt)("li",{parentName:"ul"},"Enable / Disable Zones"),(0,a.kt)("li",{parentName:"ul"},"Android features",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Foreground Notification"))),(0,a.kt)("li",{parentName:"ul"},"iOS features",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"App Restart Notification")))),(0,a.kt)("h2",{id:"custom-event-metadata"},"Custom Event Metadata"),(0,a.kt)("p",null,"Custom event metadata is a feature which is available in the Bluedot Point SDK for our customers to set additional event-specific metadata to our location events. For further information refer to ",(0,a.kt)("a",{parentName:"p",href:"/Custom%20Event%20Metadata"},"Custom Event Metadata")),(0,a.kt)("p",null,"It is recommended to set the Custom Event Meta Data before starting GeoTriggering or Tempo."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Maximum 20 entries can be set in custom event metadata. If more than 20 entries are set, Bluedot SDK throws an error as: Only 20 CustomEventMetaData fields are allowed.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'BluedotPointSdk.setCustomEventMetadata({\n\xa0 orderId: "order_123",\n\xa0 storeId: "store_456",\n\xa0 customerId: "789"\n})\n')),(0,a.kt)("h2",{id:"enable--disable-zones"},"Enable / Disable Zones"),(0,a.kt)("p",null,"An app may optionally disable (and later re-enable) Zones by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"setZoneDisableByApplication"),". For further information refer to Enable or disable Zones documentation (",(0,a.kt)("a",{parentName:"p",href:"/Point%20SDK/Android/Features/Enable%20or%20disable%20zones"},"Android")," | ",(0,a.kt)("a",{parentName:"p",href:"/Point%20SDK/iOS/Features/Enable%20or%20disable%20zones"},"iOS"),")\xa0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const zoneIdToDisable = "your_zone_id";\nconst disableZone = true;\n')),(0,a.kt)("p",null,"BluedotPointSdk.setZoneDisableByApplication(zoneIdToDisable, disableZone);"),(0,a.kt)("p",null,"If you want to check if a Zone is enabled or disabled you can use the method ",(0,a.kt)("inlineCode",{parentName:"p"},"isZoneDisablebyApplication")," as below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const zoneIdToDisable = \"your_zone_id\";\n\nBluedotPointSdk.isZoneDiableByApplication(zoneIdToDisable)\n\xa0 .then(isDisable => {\n\xa0 \xa0 if (!isDisable) {\n\xa0 \xa0 \xa0 BluedotPointSdk.setZoneDisableByApplication(zoneIdToDisable, true)\n\xa0 \xa0 }\n\xa0 })\n\xa0 .catch(error => console.error('Error', error))\n")),(0,a.kt)("h2",{id:"android-features"},"Android Features"),(0,a.kt)("h3",{id:"foreground-notification"},"Foreground Notification"),(0,a.kt)("p",null,"Given the restrictions on accessing location data from the background, it is recommended that the Geo-triggering service be run as a foreground service, and the Tempo service must be run as a foreground service. For more information refer to ",(0,a.kt)("a",{parentName:"p",href:"/Point%20SDK/Android/Location%20Permission%20&%20Notifications%20Best%20Practices"},"Android \u2013 Location Permission & Notifications Best Practices")),(0,a.kt)("p",null,"The Foreground Notification method (",(0,a.kt)("inlineCode",{parentName:"p"},"androidNotification"),") is included in the ",(0,a.kt)("inlineCode",{parentName:"p"},"GeoTriggeringBuilder")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"TempoBuilder")," classes. It should be set up before starting any of the Geo-triggering or Tempo services as below."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Geo-triggering")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const geoTriggeringService = new BluedotPointSdk.GeoTriggeringBuilder()\n\ngeoTriggeringService\n\xa0 .androidNotification(\n\xa0 \xa0 "notification channel Id",\xa0\n\xa0 \xa0 "notification channel name",\n\xa0 \xa0 "notification title",\n\xa0 \xa0 "notification content",\n\xa0 \xa0 "notification ID" // optional\n\xa0 )\n\xa0 .start(\n\xa0 \xa0 () => console.log("On success callback"),\n\xa0 \xa0 (error) => console.error("On error callback")\n\xa0 )\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tempo")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const tempoService = new BluedotPointSdk.TempoBuilder()\n\ntempoService\n\xa0 .androidNotification(\n\xa0 \xa0 "notification channel Id",\n\xa0 \xa0 "notification channel name"\n\xa0 \xa0 "notification title",\xa0\n\xa0 \xa0 "notification content",\n\xa0 \xa0 "notification ID" // optional\n\xa0 )\n\xa0 .start(\n\xa0 \xa0 () => console.log("On success callback"),\n\xa0 \xa0 (error) => console.error("On error callback")\n\xa0 )\n')),(0,a.kt)("h2",{id:"ios-features"},"iOS Features"),(0,a.kt)("h3",{id:"app-restart-notification"},"App Restart Notification"),(0,a.kt)("p",null,"Bluedot Point SDK includes a method for apps to display app restart notification to user after app termination. For further details refer to ",(0,a.kt)("a",{parentName:"p",href:"/Point%20SDK/iOS/Features/App%20restart%20notification"},"iOS Features \u2013 App restart")),(0,a.kt)("p",null,"The App restart method (",(0,a.kt)("inlineCode",{parentName:"p"},"iOSAppRestartNotification"),") is included in the ",(0,a.kt)("inlineCode",{parentName:"p"},"GeoTriggeringBuilder"),". It should be set up before starting Geo-triggering.\xa0"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This feature is ",(0,a.kt)("strong",{parentName:"p"},"not available in Tempo."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const geoTriggeringService = new BluedotPointSdk.GeoTriggeringBuilder()\n\ngeoTriggeringService\n\xa0 .iOSAppRestartNotification(\n\xa0 \xa0 "notification title",\xa0\n\xa0 \xa0 "button text content"\n\xa0 )\n\xa0 .start(\n\xa0 \xa0 () => console.log("On success callback"),\n\xa0 \xa0 (error) => console.error("On error callback")\n\xa0 )\n')))}d.isMDXComponent=!0}}]);