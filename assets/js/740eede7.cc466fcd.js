"use strict";(self.webpackChunkbluedot_docs=self.webpackChunkbluedot_docs||[]).push([[3970],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,m=u["".concat(p,".").concat(d)]||u[d]||g[d]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},33165:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={},o="iOS Integration",l={unversionedId:"integrations/Braze/iOS",id:"integrations/Braze/iOS",title:"iOS Integration",description:"Table of Contents",source:"@site/docs/integrations/Braze/iOS.md",sourceDirName:"integrations/Braze",slug:"/integrations/Braze/iOS",permalink:"/integrations/Braze/iOS",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Android Integration",permalink:"/integrations/Braze/Android"},next:{title:"Overview",permalink:"/integrations/CleverTap/Overview"}},p={},s=[{value:"Integrate your project with Bluedot Point SDK",id:"integrate-your-project-with-bluedot-point-sdk",level:2},{value:"Integrate your project with Braze SDK",id:"integrate-your-project-with-braze-sdk",level:2}],c={toc:s},u="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ios-integration"},"iOS Integration"),(0,a.kt)("h1",{id:"table-of-contents"},"Table of Contents"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Getting started",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Integrate your project with Bluedot Point SDK"),(0,a.kt)("li",{parentName:"ul"},"Integrate your project with Braze SDK"))),(0,a.kt)("li",{parentName:"ul"},"Interaction between Braze SDK and Bluedot Point SDK",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Start Braze SDK Services"),(0,a.kt)("li",{parentName:"ul"},"Setup Bluedot Location Services")))),(0,a.kt)("h1",{id:"getting-started"},"Getting started"),(0,a.kt)("p",null,"This documentation depends on BluedotPointSDK and Braze SDK. Both dependencies can be managed by CocoaPods or Swift Package Manager."),(0,a.kt)("h2",{id:"integrate-your-project-with-bluedot-point-sdk"},"Integrate your project with Bluedot Point SDK"),(0,a.kt)("p",null,"You can find detailed instructions\xa0",(0,a.kt)("a",{parentName:"p",href:"/Point%20SDK/iOS/Quick%20Start"},"here")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Import Bluedot Point SDK to your class: ",(0,a.kt)("inlineCode",{parentName:"p"},"import BDPointSDK"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Implement Bluedot\xa0",(0,a.kt)("a",{parentName:"p",href:"https://ios-docs.bluedot.io/Protocols/BDPGeoTriggeringEventDelegate.html"},(0,a.kt)("inlineCode",{parentName:"a"},"BDPGeoTriggeringEventDelegate")),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"extension YourClass: BDPGeoTriggeringEventDelegate {\n\n    func didEnterZone(_ triggerEvent: GeoTriggerEvent) {\n        // Your logic when the device enters a Bluedot Zone\n    }\n\n     func didExitZone(_ triggerEvent: GeoTriggerEvent) {\n        // Your logic when the device leaves a Bluedot Zone\n     }\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Assign GeoTriggeringEvent delegate with your implementation using ",(0,a.kt)("a",{parentName:"p",href:"https://ios-docs.bluedot.io/Classes/BDLocationManager.html"},(0,a.kt)("inlineCode",{parentName:"a"},"BDLocationManager"))),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"let instanceOfYourClass = YourClass()\nBDLocationManager.instance()?.geoTriggeringEventDelegate = instanceOfYourClass\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Authenticate with the Bluedot services using ",(0,a.kt)("a",{parentName:"p",href:"https://ios-docs.bluedot.io/Classes/BDLocationManager.html#/c:objc(cs)BDLocationManager(im)initializeWithProjectId:completion:"},(0,a.kt)("inlineCode",{parentName:"a"},"BDLocationManager"))),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'BDLocationManager.instance()?.initialize()(withProjectId: projectId) { error in\n \xa0 \xa0 guard error == nil else {\n        print("There was an error initializing the Bluedot Point SDK: \\(error.localizedDescription)")\n        return\n     }\n}\n')))),(0,a.kt)("h2",{id:"integrate-your-project-with-braze-sdk"},"Integrate your project with Braze SDK"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Install the Braze SDK and then import to your class: ",(0,a.kt)("inlineCode",{parentName:"p"},"import BrazeKit"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add a static property to your AppDelegate class"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"class AppDelegate: UIResponder, UIApplicationDelegate {\n    static var braze: Braze? = nil\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Configure Braze SDK within the ",(0,a.kt)("inlineCode",{parentName:"p"},"application:didFinishLaunchingWithOptions")," method.",(0,a.kt)("br",{parentName:"p"}),"\n","For further information refer to ",(0,a.kt)("a",{parentName:"p",href:"https://www.braze.com/docs/developer_guide/platform_integration_guides/swift/initial_sdk_setup/overview"},"Braze Developer Documentation")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'```swift\nlet configuration = Braze.Configuration(\n    apiKey: "YOUR-APP-IDENTIFIER-API-KEY", // Should be taken from Braze Portal -> Manage Settings -> Settings Tab -> Your App -> API Key\n    endpoint: "YOUR-BRAZE-ENDPOINT" // Should be taken from Braze Portal -> Manage Settings -> Settings Tab -> Your App -> SDK Endpoint\n)\n\nlet braze = Braze(configuration: configuration)\nAppDelegate.braze = braze\n```\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Track Braze custom events in your Bluedot Entry / Exit events."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func didEnterZone(_ triggerEvent: GeoTriggerEvent) {\n\n    print("Entered Zone: \\(String(describing: triggerEvent.zoneInfo.name))")\n\n    // Name the custom event\n    let customEventName = "bluedot_entry"\n        \n    // Map the Location and Zone attributes into a properties dictionary\n    var properties = [\n        "zone_id": "\\(triggerEvent.zoneInfo.id)",\n        "zone_name": "\\(triggerEvent.zoneInfo.name)",\n        "latitude": "\\(triggerEvent.entryEvent?.locations[0].coordinate.latitude ?? 0.0)",\n        "longitude": "\\(triggerEvent.entryEvent?.locations[0].coordinate.longitude ?? 0.0)",\n        "speed": "\\(triggerEvent.entryEvent?.locations[0].speed ?? 0.0)",\n        "bearing": "\\(triggerEvent.entryEvent?.locations[0].course ?? 0.0)",\n        "timestamp": "\\(triggerEvent.entryEvent?.eventTime.timeIntervalSince1970 ?? 0.0)",\n    ]\n\n    // Map the Custom Data attributes into properties\n    let customData = triggerEvent.zoneInfo.customData\n    if !customData.isEmpty {\n        customData.forEach { data in properties["\\(data.key)"] = "\\(data.value)"}\n    }\n\n    // Log the Custom Event in Braze\n    AppDelegate.braze?.logCustomEvent(name: customEventName, properties: properties)\n}\n\nfunc didExitZone(_ triggerEvent: GeoTriggerEvent) {\n\n    print("Exited Zone: \\(String(describing: triggerEvent.zoneInfo.name))")\n\n    // Name the custom event\n    let customEventName = "bluedot_exit"\n\n    // Map the Zone attributes into a properties dictionary\n    var properties = [\n        "zone_id": "\\(triggerEvent.zoneInfo.id)",\n        "zone_name": "\\(triggerEvent.zoneInfo.name)",\n        "timestamp": "\\(triggerEvent.exitEvent?.eventTime.timeIntervalSince1970 ?? 0.0)",\n        "checkedInDuration": "\\(triggerEvent.exitEvent?.dwellTime ?? 0.0)"\n    ]\n\n    // Map the Custom Data attributes into properties\n    let customData = triggerEvent.zoneInfo.customData\n    if !customData.isEmpty {\n        customData.forEach { data in properties["\\(data.key)"] = "\\(data.value)"}\n    }\n\n    // Log the Custom Event in Braze\n    AppDelegate.braze?.logCustomEvent(name: customEventName, properties: properties)\n}\n')))))}g.isMDXComponent=!0}}]);